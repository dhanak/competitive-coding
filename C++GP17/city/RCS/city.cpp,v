head	1.10;
access;
symbols;
locks
	vidga:1.10; strict;
comment	@// @;


1.10
date	2017.11.11.20.05.33;	author vidga;	state Exp;
branches;
next	1.9;

1.9
date	2017.11.11.16.41.54;	author vidga;	state Exp;
branches;
next	1.8;

1.8
date	2017.11.11.16.37.42;	author vidga;	state Exp;
branches;
next	1.7;

1.7
date	2017.11.10.21.09.32;	author vidga;	state Exp;
branches;
next	1.6;

1.6
date	2017.11.10.19.33.03;	author vidga;	state Exp;
branches;
next	1.5;

1.5
date	2017.11.10.17.44.57;	author vidga;	state Exp;
branches;
next	1.4;

1.4
date	2017.11.10.17.19.36;	author vidga;	state Exp;
branches;
next	1.3;

1.3
date	2017.11.10.15.29.46;	author vidga;	state Exp;
branches;
next	1.2;

1.2
date	2017.11.10.14.54.45;	author vidga;	state Exp;
branches;
next	1.1;

1.1
date	2017.11.10.14.07.28;	author vidga;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Summary: smarter launches result in 1% gain
@
text
@#include <algorithm>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>

using namespace std;

struct point
{
	int x, y;
	bool operator==(point const &o) const { return x == o.x && y == o.y; }
	bool operator<(point const &o) const { return make_pair(y, x) < make_pair(o.y, o.x); }
};

struct car : public point
{
	int G, W, E;
	car() : point{}, G(0), W(0), E(0) {}
};

struct workplace : public point
{
	workplace(int x_, int y_) : point({ x_, y_ }) {}
};

struct garage : public point
{
	deque<int> cars;
	vector<int> D;
	int weight;
	size_t weight_age;
	int t;
	garage(int x_, int y_) : point({ x_, y_ }), weight(0), weight_age(0), t(-1) {}
};

istream &operator>>(istream &s, car &c)
{
	return s >> c.G >> c.W >> c.E;
}

namespace std
{
	template <class T1, class T2>
	struct hash<pair<T1,T2>>
	{
		size_t operator()(pair<T1,T2> const &p) const { return hash<T1>()(p.first) ^ (hash<T2>()(p.second) << 1); }
	};
	
	template <>
	struct hash<point>
	{
		size_t operator()(point const &p) const { return hash<pair<int,int>>()({p.x, p.y}); }
	};
}

enum dir { RIGHT, LEFT, DOWN, UP, WAIT };
char dirs[] = { '>', '<', 'v', '^', '*' };

vector<string> board;
vector<garage> garages;
vector<int> garage_prios;
vector<workplace> workplaces;
vector<car> cars;
unordered_set<pair<int,point>> transients; // time,point
multimap<int, pair<int,dir>> moves;		   // time -> car,direction

point move_dir(point const &p, int d)
{
	switch (d)
	{
	case RIGHT: return { p.x+1, p.y };
	case LEFT: return { p.x-1, p.y };
	case DOWN: return { p.x, p.y+1 };
	case UP: return { p.x, p.y-1 };
	default: return p;
	}
}

bool free(point const &p)
{
	int const N = board.size();
	if (p.x < 0 || p.x >= N || p.y < 0 || p.y >= N)
		return false;
	char b = board[p.y][p.x];
	return b == '*' || b == 'W';
}

bool free(int t, point const &p, int c, bool &transient)
{
	int const N = board.size();
	if (p.x < 0 || p.x >= N || p.y < 0 || p.y >= N)
		return false;
	if (p == workplaces[cars[c].W])
		return true;
	if (board[p.y][p.x] != '*')
		return false;
	if (transients.count(make_pair(t, p)) == 0)
		return true;
	
	transient = true;
	return false;
}

void calculate_distances()
{
	for (auto &g : garages)
	{
		queue<point> q;
		unordered_set<point> visited;

		int d = 0;
		int k = 1, kn = 0;
		int wn = workplaces.size();
		q.push(g);
		g.D.resize(workplaces.size());
		unordered_set<point> wsp;
		while (wn)
		{
			point const p = q.front();
			if (!visited.count(p))
			{
				visited.insert(p);
				auto const wi = lower_bound(workplaces.begin(), workplaces.end(), p);
				if (wi != workplaces.end() && *wi == p)
				{
					g.D[wi-workplaces.begin()] = d;
					wn--;
				}
				for (int d = 0; d < WAIT; d++)
				{
					point const pn = move_dir(p, d);
					if (free(pn))
					{
						q.push(pn);
						kn++;
					}
				}
			}
			q.pop();
			if (--k == 0)
			{
				k = kn;
				kn = 0;
				d++;
			}
		}
		
		//cerr << g.x << ',' << g.y << ": ";
		//for (int d : g.D) cerr << d << ' ';
		//cerr << '\n';
	}
}

void parse()
{
	int N; // size of board
	cin >> N;

	board.resize(N);
	garages.reserve(9);
	workplaces.reserve(9);
	
	for (int y = 0; y < N; y++)
	{
		string line;
		cin >> line;
		board[y] = line;
		
		for (int x = 0; x < N; x++)
		{
			switch (line[x])
			{
			case 'G': garages.emplace_back(x, y); break;
			case 'W': workplaces.emplace_back(x, y); break;
			default: break;
			}
		}
	}
	garage_prios.resize(garages.size());
	for (size_t gi = garages.size(); gi-- > 0; )
	{
		garage_prios[gi] = gi;
	}
	
	int K; // number of cars
	cin >> K;

	cars.resize(K);

	for (int ci = 0; ci < K; ci++)
	{
		car &c = cars[ci];
		cin >> c;
		(point&)c = garages[c.G];
		garages[c.G].cars.push_back(ci);
	}
}

enum { EMISSION, EMISSION_X_SIZE, EMISSION_SUM, DISTANCE, DISTANCE_X_EMISSION, DEEP }
	const strategy = DEEP;

void update_weights()
{
	for (auto &g : garages)
	{
		if (g.weight_age == g.cars.size())
			continue;
		g.weight_age = g.cars.size();
		car const &c = cars[g.cars.empty() ? 0 : g.cars.front()];
		switch (strategy)
		{
		case EMISSION:
			g.weight = g.cars.empty() ? 0 : c.E;
			break;
		case EMISSION_X_SIZE:
			g.weight = c.E * g.cars.size();
			break;
		case EMISSION_SUM:
			g.weight = 0;
			for (int ci : g.cars)
			{
				g.weight += cars[ci].E;
			}
			break;
		case DISTANCE:
			g.weight = g.cars.empty() ? 0 : g.D[c.W];
			break;
		case DISTANCE_X_EMISSION:
			g.weight = g.cars.empty() ? 0 : g.D[c.W] * c.E;
			break;
		case DEEP:
		{
			g.weight = 0;
			int t = 0;
			for (int ci : g.cars)
			{
				car &c = cars[ci];
				int w = (t + g.D[c.W]) * c.E;
				g.weight += w;
				t++;
			}
		}
		break;
		}
	}
}

bool route(int ci, int t0)
{
	queue<point> q;
	unordered_set<point> visited;
	unordered_map<pair<int,point>, int> trail;

	int t = t0;
	int k = 1, kn = 0;
	q.push(cars[ci]);
	auto const &w = workplaces[cars[ci].W];
	while (!q.empty())
	{
		point const from = q.front();
		if (from == w)
			break;
		
		if (!visited.count(from) || trail[make_pair(t, from)] == WAIT)
		{
			visited.insert(from);
			bool tr = false;
			for (int d = 0; d <= WAIT; d++)
			{
				if (d == WAIT && (!tr || t == t0))
					break;
			
				point const to = move_dir(from, d);
				if (free(t+1, to, ci, tr))
				{
					trail[make_pair(t+1, to)] = d;
					q.push(to);
					kn++;
				}
			}
		}

		q.pop();
		if (--k == 0)
		{
			k = kn;
			kn = 0;
			t++;
		}
	}
	if (q.empty())
		return false;

	for (point p = w; t != t0; t--)
	{
		if (!(p == w))
		{
			transients.emplace(t, p);
		}
		int const d = trail[make_pair(t, p)];
		if (d != WAIT)
		{
			p = move_dir(p, d^1);
			moves.emplace(t-1, make_pair(ci, (dir)d));
		}
	}
	return true;
}

void solve()
{
	int K = cars.size();
	for (int t = 0; K; t++)
	{
		update_weights();
		sort(garage_prios.begin(), garage_prios.end(), [](int a, int b){
				return garages[a].weight > garages[b].weight;
			});

		for (int gi : garage_prios)
		{
			garage &g = garages[gi];
			if (g.cars.empty() || g.t >= t)
				continue;
			
			int const ci = g.cars.front();
			for (g.t = t; !route(ci, g.t); g.t++);
			g.cars.pop_front();
			K--;
		}
	}
}

void print()
{
	if (moves.empty())
		return;
	
	int const t_max = moves.rbegin()->first;
	for (int t = 0; t <= t_max; t++)
	{
		auto r = moves.equal_range(t);
		cout << distance(r.first, r.second) << '\n';
		for (; r.first != r.second; ++r.first)
			cout << r.first->second.first << ' ' << dirs[r.first->second.second] << '\n';
	}
	cout << "0\n";
}

void dump()
{
	cerr << garages.size() << " garages: ";
	for (auto const &g : garages)
	{
		cerr << g.x << ',' << g.y << '-';
		for (auto ci : g.cars)
			cerr << ci << ',';
		cerr << "   ";
	}
	cerr << '\n';
	
	cerr << workplaces.size() << " workplaces: ";
	for (auto const &w : workplaces)
		cerr << w.x << ',' << w.y << ' ';
	cerr << '\n';
	
	cerr << cars.size() << " cars: ";
	for (auto const &c : cars)
		cerr << c.x << ',' << c.y << " to " << c.W << ':' << c.E << ' ';
	cerr << '\n';
}

int main()
{
	parse();
	if (strategy >= DISTANCE)
	{
		calculate_distances();
	}
	solve();
	print();
	return 0;
}
@


1.9
log
@Summary: reverted to best version
@
text
@d36 3
a38 1
	garage(int x_, int y_) : point({ x_, y_ }), weight(0) {}
d205 1
a205 1
	const strategy = EMISSION;
d211 3
d328 1
a328 1
			if (g.cars.empty())
d332 3
a334 5
			if (route(ci, t))
			{
				g.cars.pop_front();
				K--;
			}
@


1.8
log
@Summary: oneway streets

Introduced oneway streets (a.k.a force direction on two lane roads),
but its worse than ever.
@
text
@a1 1
#include <array>
d98 1
a98 7
	int i;
	for (i = 0; i <= WAIT; i++)
	{
		if (dirs[i] == board[p.y][p.x])
			break;
	}
	if (i > WAIT)
a156 75
char field(point const &p)
{
	int const N = board.size();
	if (p.x < 0 || p.x >= N || p.y < 0 || p.y >= N)
		return '-'; // wall
	char b = board[p.y][p.x];
	for (int d = 0; d < WAIT; d++)
	{
		if (dirs[d] == b)
			return '*';
	}
	return b;
}

array<array<int,4>,4> const dir_rot {{
		{ RIGHT, LEFT, DOWN, UP },
		{ LEFT, RIGHT, UP, DOWN },
		{ DOWN, UP, LEFT, RIGHT },
		{ UP, DOWN, RIGHT, LEFT}
	}};

template<class C>
void set_entrances(C const& points, char from, char to)
{
	for (auto const &p0 : points)
	{
		for (int d = 0; d < 4; d++)
		{
			auto const p = move_dir(p0, d);
			if (field(p) == from)
			{
				board[p.y][p.x] = to;
			}
		}
	}
}

void set_oneway_streets()
{
	int const N = board.size();
	auto const md = move_dir;
	set_entrances(workplaces, '*', '!');
	set_entrances(garages, '*', '!');
	for (int rd = 0; rd < 4; rd++)
	{
		int const r = dir_rot[RIGHT][rd];
		int const l = dir_rot[LEFT][rd];
		int const d = dir_rot[DOWN][rd];
		int const u = dir_rot[UP][rd];
		point p;
		for (p.y = 0; p.y < N; p.y++)
		{
			for (p.x = 0; p.x < N; p.x++)
			{
				if (board[p.y][p.x] != '*')
					continue;
			
				string const block {
					field(md(md(p, l), u)), field(md(p, u)), field(md(md(p, r), u)),
					field(md(p, l)),        field(p),        field(md(p, r)),
					field(md(md(p, l), d)), field(md(p, d)), field(md(md(p, r), d))
				};
				if (block == "******---")
				{
					board[p.y][p.x] = dirs[rd];
				}
			}
		}
	}
	set_entrances(workplaces, '!', '*');
	set_entrances(garages, '!', '*');
	for (auto const &s : board)
		cerr << s << '\n';
}

a181 1
	set_oneway_streets();
a266 9

			int dr;
			for (dr = 0; dr < WAIT; dr++)
			{
				if (dirs[dr] == board[from.y][from.x])
					break;
			}
			dr = dr == WAIT ? -1 : dr;
			
a269 2
				if (dr != -1 && d != dr)
					continue;
d272 1
@


1.7
log
@Summary: slightly improved result

After a lot of experiments with garage order, found one which is slightly
better than the naive order. Not sure if its really better, though.
@
text
@d2 1
d60 2
a61 2
enum dir { RIGHT, LEFT, DOWN, UP, WAIT, WAIT_ };
char dirs[] = { '>', '<', 'v', '^', '!', '!' };
d99 7
a105 1
	if (board[p.y][p.x] != '*')
d164 75
d264 1
d286 1
a286 1
	const strategy = EMISSION_X_SIZE;
d350 9
d362 2
a365 1
			
@


1.6
log
@Summary: selectable order strategies

The best is still the simplest: order by emission.
@
text
@d202 3
a206 3
	enum { EMISSION, DISTANCE, DISTANCE_X_EMISSION, DEEP }
	const strategy = EMISSION;
	
d215 10
d378 4
a381 2
	calculate_distances();
	//dump();
@


1.5
log
@Summary: reverted to simple priorities
@
text
@d17 1
a17 1
	bool operator<(point const &o) const { return make_pair(x, y) < make_pair(o.x, o.y); }
d22 2
a23 2
	int G, W, E, D;
	car() : point{}, G(0), W(0), E(0), D(0) {}
d34 1
d70 13
a82 1
int estimate_distance(int gi, int wi)
d84 71
a154 3
	garage const &g = garages[gi];
	workplace const &w = workplaces[wi];
	return abs(g.x - w.x) + abs(g.y - w.y);
a196 1
		c.D = estimate_distance(c.G, c.W);
d204 3
d209 13
a221 4
		g.weight = 0;
#if 0	   
		int t = 0;
		for (int ci : g.cars)
d223 9
a231 4
			car &c = cars[ci];
			int w = (t + c.D) * c.E;
			g.weight += w;
			t++;
d233 1
a233 5
#else
		if (!g.cars.empty())
		{
			car const &c = cars[g.cars.front()];
			g.weight = c.E;
a234 29
#endif
	}
}

bool free(int t, point const &p, int c, bool &transient)
{
	int const N = board.size();
	if (p.x < 0 || p.x >= N || p.y < 0 || p.y >= N)
		return false;
	if (p == workplaces[cars[c].W])
		return true;
	if (board[p.y][p.x] != '*')
		return false;
	if (transients.count(make_pair(t, p)) == 0)
		return true;
	
	transient = true;
	return false;
}

point move_dir(point const &p, int d)
{
	switch (d)
	{
	case RIGHT: return { p.x+1, p.y };
	case LEFT: return { p.x-1, p.y };
	case DOWN: return { p.x, p.y+1 };
	case UP: return { p.x, p.y-1 };
	default: return p;
d368 1
@


1.4
log
@Summary: new, disfunctional garage prios
@
text
@d22 2
a23 3
	int G, W, E;
	int weight;
	car() : point{}, G(0), W(0), E(0), weight(0) {}
d69 7
d101 5
d111 2
a112 2
	
	for (int i = 0; i < K; i++)
d114 1
a114 1
		car &c = cars[i];
d116 1
d118 1
a118 1
		garages[c.G].cars.push_back(i);
d122 1
a122 8
int estimate_distance(int gi, int wi)
{
	garage const &g = garages[gi];
	workplace const &w = workplaces[wi];
	return abs(g.x - w.x) + abs(g.y - w.y);
}

void set_weights()
d126 2
d132 2
a133 2
			c.weight = (t + estimate_distance(c.G, c.W)) * c.E;
			g.weight += c.weight;
d136 7
a142 5
	}
	garage_prios.resize(garages.size());
	for (size_t i = garages.size(); i-- > 0; )
	{
		garage_prios[i] = i;
d241 1
a254 1
				g.weight -= cars[ci].weight;
d268 1
a268 1
	for (int i = 0; i <= t_max; i++)
d270 1
a270 1
		auto r = moves.equal_range(i);
a303 1
	set_weights();
@


1.3
log
@Summary: first submitted version
@
text
@d23 2
a24 1
	car() : point{}, G(0), W(0), E(0) {}
d35 2
a36 1
	garage(int x_, int y_) : point({ x_, y_ }) {}
a94 5
	garage_prios.resize(garages.size());
	for (size_t i = garages.size(); i-- > 0; )
	{
		garage_prios[i] = i;
	}
d110 1
a110 1
int garage_prio(garage const &g)
d112 23
a134 1
	return g.cars.empty() ? 0 : cars[g.cars.front()].E;
d165 1
a165 1
bool route(int c, int t0)
d173 2
a174 2
	q.push(cars[c]);
	auto const &w = workplaces[cars[c].W];
a177 1
		//cerr << c << ':' << from.x << ',' << from.y << '@@' << t << '\n';
d191 1
a191 1
				if (free(t+1, to, c, tr))
a217 1
		//cerr << c << ':' << p.x << ',' << p.y << '@@' << t << '=' << d << '\n';
d221 1
a221 1
			moves.emplace(t-1, make_pair(c, (dir)d));
d233 4
a236 4
			return garage_prio(garages[a]) > garage_prio(garages[b]);
		});
		
		for (int g : garage_prios)
d238 2
a239 2
			auto &cars = garages[g].cars;
			if (cars.empty())
d242 2
a243 2
			int const c = cars.front();
			if (route(c, t))
d245 2
a246 1
				cars.pop_front();
d271 1
a271 1
	cout << garages.size() << " garages: ";
d274 4
a277 4
		cout << g.x << ',' << g.y << '-';
		for (auto c : g.cars)
			cout << c << ',';
		cout << "   ";
d279 1
a279 1
	cout << '\n';
d281 1
a281 1
	cout << workplaces.size() << " workplaces: ";
d283 2
a284 2
		cout << w.x << ',' << w.y << ' ';
	cout << '\n';
d286 1
a286 1
	cout << cars.size() << " cars: ";
d288 2
a289 2
		cout << c.x << ',' << c.y << " to " << c.W << ':' << c.E << ' ';
	cout << '\n';
d295 1
@


1.2
log
@Summary: improvements

* simplified data structures (priority queue -> queue)
* handle inability to start
@
text
@d66 1
a66 1
multimap<int, pair<int16_t,dir>> moves; // time -> car,direction
a153 1
	bool found = false;
a160 2
		{
			found = true;
a161 1
		}
d190 1
a190 1
	if (!found)
a279 1
	
@


1.1
log
@Initial revision
@
text
@d118 1
a118 1
bool free(point const &p, int t, int c, bool &transient)
d146 1
a146 1
void route(int c, int t0)
d148 1
a148 2
	typedef pair<int, point> node;

d150 1
a150 3
	priority_queue<node> q;
	unordered_map<node, int> trail; // node -> move dir
	node goal;
d152 4
a155 1
	q.emplace(-t0, cars[c]);
d159 2
a160 7
		node const n = q.top();
		int const t1 = 1 - n.first;
		point const from = n.second;
		q.pop();
		if (visited.count(from) && trail[n] != WAIT)
			continue;
		
d163 1
a163 1
			goal = n;
d167 1
a167 3
		visited.insert(from);
		bool tr = false;
		for (int d = 0; d <= WAIT; d++)
d169 6
a174 2
			if (d == WAIT && !tr)
				break;
d176 7
a182 6
			point const to = move_dir(from, d);
			if (free(to, t1, c, tr))
			{
				node const ch(-t1, to);
				trail[ch] = d;
				q.emplace(ch);
d185 8
d194 2
d197 1
a197 1
	for (node prev, cur = goal; cur.first != -t0; cur = prev)
d199 1
a199 3
		int const d = trail[cur];
		prev = node(cur.first+1, move_dir(cur.second, d^1));
		if (cur != goal)
d201 1
a201 1
			transients.emplace(-cur.first, cur.second);
d203 2
d207 2
a208 1
			moves.emplace(-prev.first, make_pair(c, (dir)d));
d211 1
d230 5
a234 3
			cars.pop_front();
			route(c, t);
			K--;
@
